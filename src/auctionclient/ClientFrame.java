/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package auctionclient;

import java.awt.Color;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.util.logging.*;
import javax.swing.*;

/**
 *
 * @author kogayou
 */
public class ClientFrame extends javax.swing.JFrame {

    /**
     * Creates new form ServerFrame
     */
    private DatagramSocket ds;
    private Thread t;
    
    public ClientFrame() {
        initComponents();
        try {
            ipTextField.setText(InetAddress.getLocalHost().getHostAddress().toString());
        } catch (UnknownHostException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void sendMessage(String str) {
        byte[] buf=(str+" ").getBytes();
        try {  
            DatagramPacket dp=new DatagramPacket(buf,buf.length,InetAddress.getByName(ipServerTextField.getText()),Integer.parseInt(portServerTextField.getText()));
            ds.send(dp);
        } catch (NumberFormatException | IOException ex) {
            JOptionPane.showMessageDialog(this,"发送失败\n"+ex,"出错！",JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ipLabel = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        ipTextField = new javax.swing.JTextField();
        clientToggleButton = new javax.swing.JToggleButton();
        msgLabel = new javax.swing.JLabel();
        msgScrollPane = new javax.swing.JScrollPane();
        msgTextPane = new javax.swing.JTextPane();
        cmdLabel = new javax.swing.JLabel();
        cmdTextField = new javax.swing.JTextField();
        auctionLabel = new javax.swing.JLabel();
        auctionScrollPane = new javax.swing.JScrollPane();
        auctionTextPane = new javax.swing.JTextPane();
        clientLabel = new javax.swing.JLabel();
        clientScrollPane1 = new javax.swing.JScrollPane();
        clientTextPane = new javax.swing.JTextPane();
        ipServerLabel = new javax.swing.JLabel();
        ipServerTextField = new javax.swing.JTextField();
        portServerLabel = new javax.swing.JLabel();
        portServerTextField = new javax.swing.JTextField();
        randomButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("网络拍卖行客户端");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ipLabel.setText("本机IP地址：");

        portTextField.setText("10000");

        portLabel.setText("端口：");

        ipTextField.setEditable(false);

        clientToggleButton.setText("启动");
        clientToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientToggleButtonActionPerformed(evt);
            }
        });

        msgLabel.setText("消息窗口：");

        msgScrollPane.setViewportView(msgTextPane);

        cmdLabel.setText("命令行：");

        cmdTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmdTextFieldKeyPressed(evt);
            }
        });

        auctionLabel.setText("竞拍室信息：");

        auctionTextPane.setEditable(false);
        auctionScrollPane.setViewportView(auctionTextPane);

        clientLabel.setText("竞拍者信息：");

        clientTextPane.setEditable(false);
        clientScrollPane1.setViewportView(clientTextPane);

        ipServerLabel.setText("服务器IP地址：");

        ipServerTextField.setText("127.0.0.1");

        portServerLabel.setText("端口：");

        portServerTextField.setText("8000");

        randomButton.setText("随机端口");
        randomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(msgLabel)
                    .addComponent(cmdLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ipLabel)
                                .addGap(18, 18, 18)
                                .addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ipServerLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ipServerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(portLabel)
                                .addGap(18, 18, 18)
                                .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(portServerLabel)
                                .addGap(18, 18, 18)
                                .addComponent(portServerTextField))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(msgScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                        .addComponent(cmdTextField)))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(auctionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addComponent(clientLabel)
                        .addComponent(clientScrollPane1)
                        .addComponent(auctionLabel))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(clientToggleButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(randomButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipLabel)
                    .addComponent(portLabel)
                    .addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientToggleButton)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipServerLabel)
                    .addComponent(ipServerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portServerLabel)
                    .addComponent(portServerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(randomButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msgLabel)
                    .addComponent(auctionLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(msgScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmdLabel)
                        .addGap(18, 18, 18)
                        .addComponent(cmdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(auctionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clientLabel)
                        .addGap(18, 18, 18)
                        .addComponent(clientScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clientToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientToggleButtonActionPerformed
        // TODO add your handling code here:
        if (clientToggleButton.isSelected()) {
            try {
                ds=new DatagramSocket(Integer.parseInt(portTextField.getText()));
            } catch (NumberFormatException | SocketException ex) {
                JOptionPane.showMessageDialog(this,"无法建立UDP套接字，请检查端口号是否正确且未被使用\n"+ex,"出错！",JOptionPane.ERROR_MESSAGE);
                clientToggleButton.setSelected(false);
                return;
            }
            ClientKernel.setTextPanes(msgTextPane,auctionTextPane,clientTextPane);
            t=new Thread(new Runnable() {  
                public void run() {  
                    byte[] buf=new byte[8192];  
                    DatagramPacket dp=new DatagramPacket(buf,8192); 
                    while(true) {  
                        try {   
                            ds.receive(dp);
                        } catch (IOException ex) {
                            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
                            continue;                            
                        }
                        ClientKernel.processDatagramPacket(dp);
                    }                  
                }  
            });
            ipServerTextField.setEditable(false);
            portTextField.setEditable(false);
            portServerTextField.setEditable(false);
            t.start();
            ClientKernel.appendTextPanes(msgTextPane,"客户端已启动",Color.RED);
        } else {
            sendMessage("/quit");
            t.stop();
            ds.close();
            ClientKernel.appendTextPanes(msgTextPane,"客户端已关闭",Color.RED);
            ClientKernel.updateTextPanes(auctionTextPane,"",new Color(206,123,0));
            ClientKernel.updateTextPanes(clientTextPane,"",new Color(206,123,0));
            ipServerTextField.setEditable(true);
            portTextField.setEditable(true);
            portServerTextField.setEditable(true);
        }
    }//GEN-LAST:event_clientToggleButtonActionPerformed

    private void randomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomButtonActionPerformed
        // TODO add your handling code here:
        if (clientToggleButton.isSelected()) {
            JOptionPane.showMessageDialog(this,"启动中无法修改端口号","出错！",JOptionPane.ERROR_MESSAGE);
        } else{
            portTextField.setText(ClientUtil.getRandomPort());
        }
    }//GEN-LAST:event_randomButtonActionPerformed

    private void cmdTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmdTextFieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
            if (!clientToggleButton.isSelected()) {
                JOptionPane.showMessageDialog(this,"请先启动","出错！",JOptionPane.ERROR_MESSAGE);
                return;
            }
            ClientKernel.appendTextPanes(msgTextPane,cmdTextField.getText(),Color.black);
            sendMessage(cmdTextField.getText());
        }
    }//GEN-LAST:event_cmdTextFieldKeyPressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (clientToggleButton.isSelected()) {
            sendMessage("/quit");
            t.stop();
            ds.close();
        }
        
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel auctionLabel;
    private javax.swing.JScrollPane auctionScrollPane;
    private javax.swing.JTextPane auctionTextPane;
    private javax.swing.JLabel clientLabel;
    private javax.swing.JScrollPane clientScrollPane1;
    private javax.swing.JTextPane clientTextPane;
    private javax.swing.JToggleButton clientToggleButton;
    private javax.swing.JLabel cmdLabel;
    private javax.swing.JTextField cmdTextField;
    private javax.swing.JLabel ipLabel;
    private javax.swing.JLabel ipServerLabel;
    private javax.swing.JTextField ipServerTextField;
    private javax.swing.JTextField ipTextField;
    private javax.swing.JLabel msgLabel;
    private javax.swing.JScrollPane msgScrollPane;
    private javax.swing.JTextPane msgTextPane;
    private javax.swing.JLabel portLabel;
    private javax.swing.JLabel portServerLabel;
    private javax.swing.JTextField portServerTextField;
    private javax.swing.JTextField portTextField;
    private javax.swing.JButton randomButton;
    // End of variables declaration//GEN-END:variables
}
